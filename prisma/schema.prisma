// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 지점 정보
model Branch {
  id        String   @id @default(cuid())
  name      String   @unique  // 지점명 (예: "센시빌리티")
  index     Int      @unique  // 드롭다운 인덱스
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  dailyMetrics DailyMetric[]
  dailyVisitors DailyVisitor[]
  campaigns    Campaign[]
  strategies   Strategy[]
  combinedAnalyses CombinedAnalysis[]

  @@map("branches")
}

// 일일 지표 (매일 크롤링되는 데이터)
model DailyMetric {
  id        String   @id @default(cuid())
  branchId  String
  date      DateTime @db.Date  // 수집 날짜 (YYYY-MM-DD)

  // 신규 이용자 수
  newUsers  Int?

  // 좌석 이용자 수
  seatUsage Int?

  // 매출 데이터
  totalRevenue      Decimal?  @db.Decimal(10, 2)  // 총 매출
  dayTicketRevenue  Decimal?  @db.Decimal(10, 2)  // 당일권 매출
  timeTicketRevenue Decimal?  @db.Decimal(10, 2)  // 시간권 매출
  termTicketRevenue Decimal?  @db.Decimal(10, 2)  // 기간권 매출

  // 신규 이용자 상세 통계
  newUsersMale      Int?  // 신규 남자 이용자 수
  newUsersFemale    Int?  // 신규 여자 이용자 수
  newUsers10s       Int?  // 신규 10대
  newUsers20s       Int?  // 신규 20대
  newUsers30s       Int?  // 신규 30대
  newUsers40s       Int?  // 신규 40대
  newUsers50s       Int?  // 신규 50대
  newUsers60plus    Int?  // 신규 60대 이상

  // 메타 정보
  collectedAt DateTime @default(now())  // 실제 수집 시간

  // Relations
  branch    Branch   @relation(fields: [branchId], references: [id], onDelete: Cascade)

  @@unique([branchId, date])  // 지점당 하루에 하나의 레코드만
  @@index([date])
  @@index([branchId, date])
  @@map("daily_metrics")
}

// 일일 방문자 (좌석 이용자) - 재방문 추적용
model DailyVisitor {
  id           String   @id @default(cuid())
  branchId     String
  visitDate    DateTime @db.Date  // 방문 날짜

  // 개인 식별 정보 (해시 처리)
  phoneHash    String   // SHA256 해시된 전화번호 (재방문 추적용)
  phoneLast4   String?  // 전화번호 뒤 4자리 (관리자 확인용)

  // 방문자 정보
  gender       String?  // 성별 (남자/여자/미상)
  age          Int?     // 나이
  ageGroup     String?  // 연령대 (10대/20대/30대...)

  // 방문 유형
  isNewUser    Boolean  @default(false)  // 신규 이용자 여부

  // 메타 정보
  collectedAt  DateTime @default(now())

  // Relations
  branch       Branch   @relation(fields: [branchId], references: [id], onDelete: Cascade)

  @@index([branchId, visitDate])
  @@index([phoneHash])  // 재방문 조회용
  @@index([visitDate])
  @@map("daily_visitors")
}

// 광고 캠페인
model Campaign {
  id          String   @id @default(cuid())
  branchId    String
  name        String   // 캠페인명
  startDate   DateTime @db.Date
  endDate     DateTime @db.Date

  // 광고 지표
  impressions Int?     // 노출수
  clicks      Int?     // 클릭수
  cost        Decimal? @db.Decimal(10, 2)  // 비용

  // 상태 관리
  status      String   @default("ONGOING")  // ONGOING: 진행중, COMPLETED: 완료

  // 메타 정보
  description String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  branch      Branch   @relation(fields: [branchId], references: [id], onDelete: Cascade)

  @@index([branchId])
  @@index([startDate, endDate])
  @@index([status])
  @@map("campaigns")
}

// 지점 전략
model Strategy {
  id          String   @id @default(cuid())
  branchId    String
  name        String   // 전략명
  type        String   // 전략 유형: PRICE_DISCOUNT, REVIEW_EVENT, NEW_CONTENT, etc.
  startDate   DateTime @db.Date
  endDate     DateTime @db.Date

  // 전략 상세
  reason      String?  @db.Text  // 전략 수립 이유
  description String?  @db.Text  // 전략 상세 내용

  // 상태 관리
  status      String   @default("ONGOING")  // ONGOING: 진행중, COMPLETED: 완료

  // 메타 정보
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  branch      Branch   @relation(fields: [branchId], references: [id], onDelete: Cascade)

  @@index([branchId])
  @@index([type])
  @@index([startDate, endDate])
  @@index([status])
  @@map("strategies")
}

// 통합 분석 (광고 + 전략)
model CombinedAnalysis {
  id          String   @id @default(cuid())
  branchId    String
  name        String   // 분석명
  startDate   DateTime @db.Date
  endDate     DateTime @db.Date

  // 광고 지표
  cost        Decimal? @db.Decimal(10, 2)  // 광고 비용
  impressions Int?     // 노출수
  clicks      Int?     // 클릭수

  // 전략 정보
  strategyType String?  // 전략 유형: PRICE_DISCOUNT, REVIEW_EVENT, NEW_CONTENT
  reason       String?  @db.Text  // 전략 수립 이유
  description  String?  @db.Text  // 전략 상세 내용

  // 상태 관리
  status      String   @default("ONGOING")  // ONGOING: 진행중, COMPLETED: 완료

  // 메타 정보
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  branch      Branch   @relation(fields: [branchId], references: [id], onDelete: Cascade)

  @@index([branchId])
  @@index([startDate, endDate])
  @@index([status])
  @@map("combined_analyses")
}
